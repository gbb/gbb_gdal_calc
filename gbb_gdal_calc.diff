Index: swig/python/scripts/gdal_calc.py
===================================================================
--- swig/python/scripts/gdal_calc.py	(revision 26098)
+++ swig/python/scripts/gdal_calc.py	(working copy)
@@ -224,8 +224,9 @@
             myY=Y*myBlockSize[1]
 
             # create empty buffer to mark where nodata occurs
-            myNDVs=numpy.zeros(myBufSize)
-            myNDVs.shape=(nYValid,nXValid)
+            if not opts.ManualNoData: 
+              myNDVs=numpy.zeros(myBufSize)
+              myNDVs.shape=(nYValid,nXValid)
 
             # fetch data for each input layer
             for i,Alpha in enumerate(myAlphaList):
@@ -236,7 +237,8 @@
                                       win_xsize=nXValid, win_ysize=nYValid)
 
                 # fill in nodata values
-                myNDVs=1*numpy.logical_or(myNDVs==1, myval==myNDV[i])
+                if not opts.ManualNoData: 
+                  myNDVs=1*numpy.logical_or(myNDVs==1, myval==myNDV[i])
 
                 # create an array of values for this block
                 exec("%s=myval" %Alpha)
@@ -252,7 +254,8 @@
 
             # propogate nodata values 
             # (set nodata cells to zero then add nodata value to these cells)
-            myResult = ((1*(myNDVs==0))*myResult) + (myOutNDV*myNDVs)
+            if not opts.ManualNoData: 
+              myResult = ((1*(myNDVs==0))*myResult) + (myOutNDV*myNDVs)
 
             # write data block to the output file
             BandWriteArray(myOutB, myResult, xoff=myX, yoff=myY)
@@ -276,6 +279,7 @@
 
     parser.add_option("--outfile", dest="outF", default='gdal_calc.tif', help="output file to generate or fill.")
     parser.add_option("--NoDataValue", dest="NoDataValue", type=float, help="set output nodatavalue (Defaults to datatype specific values)")
+    parser.add_option("--ManualNoData", dest="ManualNoData", action="store_true", help="manage nodata values manually in your calculation formula, can provide a speed improvement")
     parser.add_option("--type", dest="type", help="set datatype must be one of %s" % list(DefaultNDVLookup.keys()))
     parser.add_option("--format", dest="format", default="GTiff", help="GDAL format for output file (default 'GTiff')")
     parser.add_option(
